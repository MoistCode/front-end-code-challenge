{"ast":null,"code":"var _jsxFileName = \"/home/moistcode/Github/front-end-code-challenge/src/components/formMessage.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nvar FormMessage = function FormMessage(props) {\n  var isValid = props.isValid,\n      emptyFields = props.emptyFields;\n\n  if (emptyFields.length === 0 && !isValid) {\n    console.log(\"FormMessage cannot be invalid and have no invalid fields.\");\n    return null;\n  }\n\n  var validityClassName = \"profile-form__message\".concat(isValid ? \"\" : \" profile-form__message--invalid\");\n  var message = isValid ? \"Form submitted!\" : generateInvalidMessage(emptyFields);\n  return React.createElement(\"div\", {\n    className: \"profile-form__row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: validityClassName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, message));\n};\n\nfunction generateInvalidMessage(emptyFields) {\n  var emptyFieldNames = emptyFields.map(function (element) {\n    return element.name;\n  });\n  return capitalizeFirstLetter(\"\".concat(emptyFieldNames.join(\", \"), \" can not be blank\"));\n}\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nFormMessage.defaultProps = {\n  isValid: true,\n  emptyFields: []\n};\nFormMessage.propTypes = {\n  isValid: PropTypes.bool,\n  emptyFields: PropTypes.array\n};\nexport default FormMessage;","map":{"version":3,"sources":["/home/moistcode/Github/front-end-code-challenge/src/components/formMessage.js"],"names":["React","PropTypes","FormMessage","props","isValid","emptyFields","length","console","log","validityClassName","message","generateInvalidMessage","emptyFieldNames","map","element","name","capitalizeFirstLetter","join","string","charAt","toUpperCase","slice","defaultProps","propTypes","bool","array"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,KAAK,EAAI;AAAA,MACnBC,OADmB,GACMD,KADN,CACnBC,OADmB;AAAA,MACVC,WADU,GACMF,KADN,CACVE,WADU;;AAG3B,MAAIA,WAAW,CAACC,MAAZ,KAAuB,CAAvB,IAA4B,CAACF,OAAjC,EAA0C;AACxCG,IAAAA,OAAO,CAACC,GAAR,CAAY,2DAAZ;AACA,WAAO,IAAP;AACD;;AAED,MAAMC,iBAAiB,kCACrBL,OAAO,GAAG,EAAH,GAAQ,iCADM,CAAvB;AAIA,MAAMM,OAAO,GAAGN,OAAO,GACnB,iBADmB,GAEnBO,sBAAsB,CAACN,WAAD,CAF1B;AAIA,SACE;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,SAAS,EAAEI,iBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqCC,OAArC,CADF,CADF;AAKD,CArBD;;AAuBA,SAASC,sBAAT,CAAgCN,WAAhC,EAA6C;AAC3C,MAAMO,eAAe,GAAGP,WAAW,CAACQ,GAAZ,CAAgB,UAAAC,OAAO;AAAA,WAAIA,OAAO,CAACC,IAAZ;AAAA,GAAvB,CAAxB;AAEA,SAAOC,qBAAqB,WACvBJ,eAAe,CAACK,IAAhB,CAAqB,IAArB,CADuB,uBAA5B;AAGD;;AAED,SAASD,qBAAT,CAA+BE,MAA/B,EAAuC;AACrC,SAAOA,MAAM,CAACC,MAAP,CAAc,CAAd,EAAiBC,WAAjB,KAAiCF,MAAM,CAACG,KAAP,CAAa,CAAb,CAAxC;AACD;;AAEDnB,WAAW,CAACoB,YAAZ,GAA2B;AACzBlB,EAAAA,OAAO,EAAE,IADgB;AAEzBC,EAAAA,WAAW,EAAE;AAFY,CAA3B;AAKAH,WAAW,CAACqB,SAAZ,GAAwB;AACtBnB,EAAAA,OAAO,EAAEH,SAAS,CAACuB,IADG;AAEtBnB,EAAAA,WAAW,EAAEJ,SAAS,CAACwB;AAFD,CAAxB;AAKA,eAAevB,WAAf","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst FormMessage = props => {\n  const { isValid, emptyFields } = props;\n\n  if (emptyFields.length === 0 && !isValid) {\n    console.log(\"FormMessage cannot be invalid and have no invalid fields.\");\n    return null;\n  }\n\n  const validityClassName = `profile-form__message${\n    isValid ? \"\" : \" profile-form__message--invalid\"\n  }`;\n\n  const message = isValid\n    ? \"Form submitted!\"\n    : generateInvalidMessage(emptyFields);\n\n  return (\n    <div className=\"profile-form__row\">\n      <span className={validityClassName}>{message}</span>\n    </div>\n  );\n};\n\nfunction generateInvalidMessage(emptyFields) {\n  const emptyFieldNames = emptyFields.map(element => element.name);\n\n  return capitalizeFirstLetter(\n    `${emptyFieldNames.join(\", \")} can not be blank`\n  );\n}\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nFormMessage.defaultProps = {\n  isValid: true,\n  emptyFields: []\n};\n\nFormMessage.propTypes = {\n  isValid: PropTypes.bool,\n  emptyFields: PropTypes.array\n};\n\nexport default FormMessage;\n"]},"metadata":{},"sourceType":"module"}